{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mlvdi\\\\OneDrive\\\\Documentos\\\\GitHub\\\\MinesweeperReact\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport \"./assets/styles/App.css\";\nimport React, { useState, useEffect } from 'react';\nimport { Header, Footer, ControlPanel, GamePanel } from \"./components/\";\nimport { PLACEHOLDER_CARDBACK_PATH, FLAG_PATH, QM_PATH } from './constants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [gameStarted, setGameStarted] = useState(false);\n  const [selectedLevel, setSelectedLevel] = useState(\"0\");\n  const [cards, setCards] = useState([]);\n  const [rows, setRows] = useState(3);\n  const [cols, setCols] = useState(3);\n  const [numMines, setNumMines] = useState(3);\n  useEffect(() => {\n    if (gameStarted) {\n      createPanel(selectedLevel);\n    }\n  }, [gameStarted, selectedLevel]);\n  const handleGameStart = () => {\n    setGameStarted(!gameStarted);\n    //if (!gameStarted) createPanel(selectedLevel);\n  };\n  const handleLevelChange = event => {\n    const {\n      value\n    } = event.currentTarget;\n    setSelectedLevel(value);\n    createPanel(value);\n  };\n  const handleCardClick = id => {\n    setCards(prevCards => prevCards.map(card => card.id === id ? {\n      ...card,\n      state: \"flipped\"\n    } : card));\n  };\n  const handleRightClick = id => {\n    setCards(prevCards => prevCards.map(card => {\n      if (card.id === id) {\n        let newState;\n        if (card.state === \"placeholder\") newState = \"flag\";else if (card.state === \"flag\") newState = \"qm\";else if (card.state === \"qm\") newState = \"placeholder\";else newState = card.state;\n        return {\n          ...card,\n          state: newState\n        };\n      }\n      return card;\n    }));\n  };\n  function createPanel(level) {\n    switch (level) {\n      case \"0\":\n        //numOfCardPairs = 0;\n        setRows(0);\n        setCols(0);\n        setNumMines(0);\n        break;\n      case \"1\":\n        //numOfCardPairs = 2;\n        setRows(9);\n        setCols(9);\n        setNumMines(10);\n        break;\n      case \"2\":\n        //numOfCardPairs = 3;\n        setRows(16);\n        setCols(16);\n        setNumMines(40);\n        break;\n      case \"3\":\n        //numOfCardPairs = 6;\n        setRows(16);\n        setCols(30);\n        setNumMines(99);\n        break;\n      default:\n        setRows(9);\n        setCols(9);\n        setNumMines(10);\n    }\n\n    // Create an empty grid\n    const grid = Array(rows).fill().map(() => Array(cols).fill(0));\n\n    // Randomly place mines on the grid\n    let minesPlaced = 0;\n    while (minesPlaced < numMines) {\n      const row = Math.floor(Math.random() * rows);\n      const col = Math.floor(Math.random() * cols);\n      if (grid[row][col] !== 'mine') {\n        grid[row][col] = 'mine';\n        minesPlaced++;\n\n        // Update adjacent tiles' values\n        for (let i = Math.max(0, row - 1); i <= Math.min(row + 1, rows - 1); i++) {\n          for (let j = Math.max(0, col - 1); j <= Math.min(col + 1, cols - 1); j++) {\n            if (grid[i][j] !== 'mine') {\n              grid[i][j]++;\n            }\n          }\n        }\n      }\n    }\n\n    // Convert grid values to card names\n    const field = [];\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < cols; j++) {\n        field.push({\n          id: `${i}-${j}`,\n          name: grid[i][j] === 'mine' ? 'mine' : `${grid[i][j]}`,\n          state: \"placeholder\"\n        });\n      }\n    }\n    setCards(field);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      children: [/*#__PURE__*/_jsxDEV(ControlPanel, {\n        gameStarted: gameStarted,\n        onGameStart: handleGameStart,\n        selectedLevel: selectedLevel,\n        onLevelChange: handleLevelChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GamePanel, {\n        cards: cards,\n        selectedLevel: selectedLevel,\n        onCardClick: handleCardClick,\n        onRightClick: handleRightClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 126,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Cj8P+SZWnNyY6HBRzZNDD5wRf48=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","Footer","ControlPanel","GamePanel","PLACEHOLDER_CARDBACK_PATH","FLAG_PATH","QM_PATH","jsxDEV","_jsxDEV","App","_s","gameStarted","setGameStarted","selectedLevel","setSelectedLevel","cards","setCards","rows","setRows","cols","setCols","numMines","setNumMines","createPanel","handleGameStart","handleLevelChange","event","value","currentTarget","handleCardClick","id","prevCards","map","card","state","handleRightClick","newState","level","grid","Array","fill","minesPlaced","row","Math","floor","random","col","i","max","min","j","field","push","name","children","fileName","_jsxFileName","lineNumber","columnNumber","onGameStart","onLevelChange","onCardClick","onRightClick","_c","$RefreshReg$"],"sources":["C:/Users/mlvdi/OneDrive/Documentos/GitHub/MinesweeperReact/src/App.js"],"sourcesContent":["import \"./assets/styles/App.css\";\r\nimport React, { useState, useEffect } from 'react';\r\nimport { Header, Footer, ControlPanel, GamePanel } from \"./components/\";\r\nimport { PLACEHOLDER_CARDBACK_PATH, FLAG_PATH, QM_PATH } from './constants';\r\n\r\nfunction App() {\r\n  const [gameStarted, setGameStarted] = useState(false);\r\n  const [selectedLevel, setSelectedLevel] = useState(\"0\");\r\n  const [cards, setCards] = useState([]);\r\n\r\n  const [rows, setRows] = useState(3);\r\n  const [cols, setCols] = useState(3);\r\n  const [numMines, setNumMines] = useState(3);\r\n\r\n  useEffect(() => {\r\n    if (gameStarted) {\r\n      createPanel(selectedLevel);\r\n    }\r\n  }, [gameStarted, selectedLevel]);\r\n\r\n  const handleGameStart = () => {\r\n    setGameStarted(!gameStarted);\r\n    //if (!gameStarted) createPanel(selectedLevel);\r\n  };\r\n\r\n  const handleLevelChange = (event) => {\r\n    const { value } = event.currentTarget;\r\n    setSelectedLevel(value);\r\n    createPanel(value);\r\n  };\r\n\r\n  const handleCardClick = (id) => {\r\n    setCards((prevCards) =>\r\n      prevCards.map((card) =>\r\n        card.id === id ? { ...card, state: \"flipped\" } : card\r\n      )\r\n    );\r\n  };\r\n\r\n  const handleRightClick = (id) => {\r\n    setCards((prevCards) =>\r\n      prevCards.map((card) => {\r\n        if (card.id === id) {\r\n          let newState;\r\n          if (card.state === \"placeholder\") newState = \"flag\";\r\n          else if (card.state === \"flag\") newState = \"qm\";\r\n          else if (card.state === \"qm\") newState = \"placeholder\";\r\n          else newState = card.state;\r\n          return { ...card, state: newState };\r\n        }\r\n        return card;\r\n      })\r\n    );\r\n  };\r\n\r\n  function createPanel(level) {\r\n    switch (level) {\r\n      case \"0\":\r\n        //numOfCardPairs = 0;\r\n        setRows(0);\r\n        setCols(0);\r\n        setNumMines(0);\r\n        break;\r\n      case \"1\":\r\n        //numOfCardPairs = 2;\r\n        setRows(9);\r\n        setCols(9);\r\n        setNumMines(10);\r\n        break;\r\n      case \"2\":\r\n        //numOfCardPairs = 3;\r\n        setRows(16);\r\n        setCols(16);\r\n        setNumMines(40);\r\n        break;\r\n      case \"3\":\r\n        //numOfCardPairs = 6;\r\n        setRows(16);\r\n        setCols(30);\r\n        setNumMines(99);\r\n        break;\r\n      default:\r\n        setRows(9);\r\n        setCols(9);\r\n        setNumMines(10);\r\n    }\r\n\r\n    // Create an empty grid\r\n    const grid = Array(rows).fill().map(() => Array(cols).fill(0));\r\n\r\n    // Randomly place mines on the grid\r\n    let minesPlaced = 0;\r\n    while (minesPlaced < numMines) {\r\n      const row = Math.floor(Math.random() * rows);\r\n      const col = Math.floor(Math.random() * cols);\r\n      if (grid[row][col] !== 'mine') {\r\n        grid[row][col] = 'mine';\r\n        minesPlaced++;\r\n\r\n        // Update adjacent tiles' values\r\n        for (let i = Math.max(0, row - 1); i <= Math.min(row + 1, rows - 1); i++) {\r\n          for (let j = Math.max(0, col - 1); j <= Math.min(col + 1, cols - 1); j++) {\r\n            if (grid[i][j] !== 'mine') {\r\n              grid[i][j]++;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Convert grid values to card names\r\n    const field = [];\r\n    for (let i = 0; i < rows; i++) {\r\n      for (let j = 0; j < cols; j++) {\r\n        field.push({ \r\n          id: `${i}-${j}`, \r\n          name: grid[i][j] === 'mine' ? 'mine' : `${grid[i][j]}`,\r\n          state: \"placeholder\"\r\n         });\r\n      }\r\n    }\r\n    setCards(field);\r\n  }\r\n\r\n  return (\r\n    <div id=\"container\">\r\n      <Header />\r\n      <main>\r\n        <ControlPanel\r\n          gameStarted={gameStarted}\r\n          onGameStart={handleGameStart}\r\n          selectedLevel={selectedLevel}\r\n          onLevelChange={handleLevelChange}\r\n        />\r\n        <GamePanel \r\n          cards={cards} \r\n          selectedLevel={selectedLevel} \r\n          onCardClick={handleCardClick}\r\n          onRightClick={handleRightClick}\r\n        />\r\n      </main>\r\n      <Footer />\r\n    </div>\r\n  );\r\n}\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}